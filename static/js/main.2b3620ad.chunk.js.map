{"version":3,"sources":["pages/WelcomePage.js","components/ShipsDragNDrop.js","pages/GamePage.js","App.js","index.js"],"names":["WelcomePage","startPlaying","className","onClick","ShipsDragNDrop","shipList","useState","rotated","handleDragStart","e","data","JSON","stringify","size","target","value","offsetY","Math","floor","clientY","getBoundingClientRect","top","offsetX","clientX","left","name","dataTransfer","setData","map","ele","eleIdx","onDragStart","touchstart","draggable","length","id","console","log","document","getElementById","classList","replace","handleClick","PcShipsLeft","PlayerShipsLeft","pcShips","playerShips","checkWinner","accumulator","curr","GamePage","setShipList","playerBoard","setPlayerBoard","PcBoard","setPcBoard","startGame","setStartGame","turn","setTurn","pcInfo","setPcInfo","playerInfo","setPlayerInfo","disabled","setDisabled","BOARD_ROWS","PcRowIdx","PcColIdx","pcId","ShipData","useEffect","Array","fill","dragOver","preventDefault","drop","parse","getData","DropCoord","placeShips","newShipList","filter","ship","DropRowIdx","parseInt","DropColIdx","ShipSize","validateShipPosition","i","add","generateRandomDirection","PcRotated","random","getRandomCoordinates","COORD1","COORD2","placeShipsRandomly","row","col","board","recieveShootPlayer","PlayerShotRowIdx","PlayerShotColIdx","countPlayerLeftShips","PlayerShipNum","ShotIdx","reduce","countPcLeftShips","PcShipNum","onDrop","touchend","onDragOver","touchmove","colIndex","BOARD_COLS","rowIndex","squareID","setTimeout","recieveShootPc","window","location","reload","App","appState","setAppstate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2b3620ad.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\nconst WelcomePage = ({ startPlaying }) => {\r\n\r\n    return (\r\n        <div>\r\n            <h2>BATTLESHIPS</h2>\r\n            <h3>GAMERULES:</h3>\r\n            <ol className=\"rules-list\">\r\n                <li>Drag and drop your ships into the Player's board</li>\r\n                <li>To change ship's direction, click on the ship</li>\r\n                <li>Once all ships are in place, press START</li>\r\n                <li>To start again press RESTART</li>\r\n            </ol>\r\n            <button className=\"btn\" onClick={startPlaying}>START</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WelcomePage;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nexport const ShipsDragNDrop = ({ shipList }) => {\r\n    const [toggleRotation, setToggleRotation] = useState(\"-vertical\")\r\n    let offSetPartition = 40 //each ship partition size is 40px\r\n    let rotated = false;\r\n    const handleDragStart = (e) => {\r\n        const data = JSON.stringify({\r\n            size: e.target.value,\r\n            offsetY: Math.floor(\r\n                (e.clientY - e.target.getBoundingClientRect().top) / offSetPartition // Calculate the position of the player's cursor on the ship\r\n            ),\r\n            offsetX: Math.floor(\r\n                (e.clientX - e.target.getBoundingClientRect().left) / offSetPartition\r\n            ),\r\n            rotated: rotated,\r\n            name: e.target.name,\r\n        });\r\n        e.dataTransfer.setData(\"ship\", data);\r\n    }\r\n\r\n    const handleClick = (e) => {\r\n        console.log(\"id\", e.target.id)\r\n\r\n        rotated = !rotated;\r\n        console.log(\"rotated\", rotated)\r\n        if (rotated) {\r\n            document.getElementById(`${e.target.id}`).classList.replace(`${e.target.name}`, `${e.target.name}-vertical`)\r\n        } else {\r\n            document.getElementById(`${e.target.id}`).classList.replace(`${e.target.name}-vertical`, `${e.target.name}`)\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"ships-container\">\r\n            {shipList.map((ele, eleIdx) => (\r\n                <button\r\n                    key={eleIdx}\r\n                    onDragStart={handleDragStart}\r\n                    touchstart={handleDragStart}\r\n                    draggable=\"true\"\r\n                    className={ele.name}\r\n                    name={ele.name}\r\n                    value={ele.length}\r\n                    id={ele.id}\r\n                    onClick={(e) => handleClick(e)} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport './GamePage.css';\r\nimport { ShipsDragNDrop } from '../components/ShipsDragNDrop'\r\n\r\nlet PcShipsLeft = [1, 2, 3, 4, 5];\r\nlet PlayerShipsLeft = [1, 2, 3, 4, 5];\r\nlet pcShips = 5\r\nlet playerShips = 5\r\n\r\nlet checkWinner = (accumulator, curr) => accumulator + curr;//to check winner summing all ships left\r\n\r\nconst GamePage = ({ shipList, setShipList }) => {\r\n    const [playerBoard, setPlayerBoard] = useState([])\r\n    const [PcBoard, setPcBoard] = useState([])\r\n    const [startGame, setStartGame] = useState(\"off\")\r\n    const [turn, setTurn] = useState(\"\")\r\n    const [pcInfo, setPcInfo] = useState(\"\")\r\n    const [playerInfo, setPlayerInfo] = useState(\"\")\r\n    const [disabled, setDisabled] = useState(false)\r\n\r\n    let BOARD_COLS = 10;\r\n    let BOARD_ROWS = 10;\r\n\r\n    let PcRowIdx = 0\r\n    let PcColIdx = 0\r\n    let pcId = 0 // to create square grid Id from 1 to 99\r\n\r\n    let ShipData = []\r\n    let validated = false\r\n\r\n    //initialize just once\r\n    useEffect(() => {\r\n        setPlayerBoard(new Array(BOARD_COLS).fill(0).map(() => new Array(BOARD_ROWS).fill(0))); //setting 2d array 10x10\r\n        setPcBoard(new Array(BOARD_COLS).fill(0).map(() => new Array(BOARD_ROWS).fill(0)));//setting 2d array 10x10\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(\"WHICH TURN IT IS?\", turn)\r\n    }, [turn])\r\n\r\n    // to reaload the page when RESTART button is pressed\r\n    const refresh = () => {\r\n        window.location.reload();\r\n    };\r\n\r\n    //dragging & dropping (default action of dragover is to cancel the drop so we need to prevent)\r\n    let dragOver = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    let drop = (e) => {\r\n        e.preventDefault();\r\n        ShipData = JSON.parse(e.dataTransfer.getData(\"ship\"));\r\n        let DropCoord = e.target.id\r\n        if (e.target.className === \"square shipdropedColor\") {\r\n            return\r\n        }\r\n        placeShips(DropCoord, ShipData, e)\r\n    }\r\n\r\n    //Player: place coordinates on player board\r\n    let placeShips = (DropCoord, ShipData, e) => {\r\n        const newShipList = shipList.filter(ship => ship.name !== ShipData.name)//deletes ship dropped from shipList\r\n        let DropRowIdx = parseInt(DropCoord[0])\r\n        let DropColIdx = parseInt(DropCoord[2])\r\n        let ShipSize = parseInt(ShipData.size)\r\n        let rotated = ShipData.rotated\r\n        let offsetY = parseInt(ShipData.offsetY)\r\n        let offsetX = parseInt(ShipData.offsetX)\r\n\r\n        validated = validateShipPosition(DropRowIdx, DropColIdx, ShipSize, playerBoard, rotated, offsetX, offsetY)\r\n\r\n        if (validated) {\r\n            for (let i = 0; i < ShipSize; i++) {\r\n                if (ShipData.rotated) {\r\n                    playerBoard[DropRowIdx - offsetY + i][DropColIdx] = ShipSize\r\n                    document.getElementById(`${DropRowIdx - offsetY + i},${DropColIdx}`).classList.add(\"shipdropedColor\");\r\n                }\r\n                else if (!ShipData.rotated) {\r\n                    playerBoard[DropRowIdx][DropColIdx - offsetX + i] = ShipSize\r\n                    document.getElementById(`${DropRowIdx},${DropColIdx - offsetX + i}`).classList.add(\"shipdropedColor\");\r\n                }\r\n            }\r\n            setShipList(newShipList)\r\n            generateRandomDirection(ShipSize)\r\n        }\r\n        else { console.log(\"not valid\") }\r\n    };\r\n\r\n    //PC: Random direction for PC's ships 0 horizontal 1 vertical\r\n    const generateRandomDirection = (ShipSize) => {\r\n        let PcRotated = Math.random() < 0.5\r\n        getRandomCoordinates(ShipSize, PcRotated)\r\n    }\r\n\r\n    //PC: Random coordinates for PC's board\r\n    const getRandomCoordinates = (ShipSize, PcRotated) => {\r\n        let COORD1 = Math.floor(Math.random() * BOARD_ROWS);\r\n        let COORD2 = Math.floor(Math.random() * (BOARD_ROWS - ShipSize - 1));\r\n        let offsetX = 0 //initializing offsets for PC's board as 0\r\n        let offsetY = 0\r\n        if (PcRotated) {\r\n            PcRowIdx = COORD2\r\n            PcColIdx = COORD1\r\n        }\r\n        else {\r\n            PcRowIdx = COORD1\r\n            PcColIdx = COORD2\r\n        }\r\n        validated = validateShipPosition(PcRowIdx, PcColIdx, ShipSize, PcBoard, PcRotated, offsetX, offsetY)\r\n\r\n        if (validated) {\r\n            placeShipsRandomly(ShipSize, PcRotated)\r\n        }\r\n        else {\r\n            generateRandomDirection(ShipSize)\r\n        }\r\n    };\r\n\r\n    // validate all ships positions in both boards\r\n    const validateShipPosition = (row, col, ShipSize, board, rotated, offsetX, offsetY) => {\r\n        if (!rotated) {\r\n            for (let i = col - offsetX; i < col - offsetX + ShipSize; i++) {\r\n                if (i >= BOARD_ROWS || i < 0 || board[row][i] !== 0) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n        else {\r\n            for (let i = row - offsetY; i < row - offsetY + ShipSize; i++) {\r\n                if (i >= BOARD_ROWS || i < 0 || board[i][col] !== 0) {\r\n                    return false\r\n                }\r\n            }\r\n            return true\r\n        }\r\n    }\r\n\r\n    //PC: places ships randomly on Pc's board\r\n    const placeShipsRandomly = (ShipSize, rotated) => {\r\n        for (let i = 0; i < ShipSize; i++) {\r\n            if (rotated) {\r\n                PcBoard[PcRowIdx + i][PcColIdx] = ShipSize\r\n            }\r\n            else {\r\n                PcBoard[PcRowIdx][PcColIdx + i] = ShipSize\r\n            }\r\n        }\r\n        console.log(\"pc board\", PcBoard)\r\n        return\r\n    };\r\n\r\n    //Start Game Function\r\n    let startGameBtn = (e) => {\r\n        if (shipList.length === 0) {\r\n            setStartGame(\"on\")\r\n            setTurn(\"YOUR\")\r\n            setPcInfo(`${pcShips} LEFT TO SINK`)\r\n            setPlayerInfo(`${playerShips} LEFT TO SINK`)\r\n        }\r\n    };\r\n\r\n    //Player: shoots to coordinates on PC's board\r\n    let recieveShootPc = (rowIndex, colIndex, e) => {\r\n        let squareID = e.target.id\r\n        if (startGame === \"on\") {\r\n            if (typeof PcBoard[rowIndex][colIndex] !== 'number') {\r\n                console.log(\"not allowed\")\r\n                return\r\n            }\r\n            else if (PcBoard[rowIndex][colIndex] === 0) {\r\n                PcBoard[rowIndex][colIndex] = 'o'\r\n                document.getElementById(`${squareID}`).classList.add(\"missShot\");\r\n                setTurn(\"PC's\")\r\n                setTimeout(function () { recieveShootPlayer() }, 1000)\r\n            }\r\n            else if (PcBoard[rowIndex][colIndex] === 1 || 2 || 3 || 4 || 5) {\r\n                countPcLeftShips(PcBoard[rowIndex][colIndex], e)\r\n                PcBoard[rowIndex][colIndex] = 'x'\r\n                document.getElementById(`${squareID}`).classList.add(\"shipShotColor\");\r\n                if (PcShipsLeft.reduce(checkWinner) !== 0) {\r\n                    setTurn(\"PC's\")\r\n                    setTimeout(function () { recieveShootPlayer() }, 1000)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    //PC: shoots to coordinates on Player's board\r\n    let recieveShootPlayer = () => {\r\n        //to create random shoot\r\n        let PlayerShotRowIdx = Math.floor(Math.random() * BOARD_ROWS);\r\n        let PlayerShotColIdx = Math.floor(Math.random() * BOARD_ROWS);\r\n\r\n        if (startGame === \"on\") {\r\n            if (typeof playerBoard[PlayerShotRowIdx][PlayerShotColIdx] !== 'number') {\r\n                recieveShootPlayer()//create other coordinates as square is already shot\r\n            }\r\n            else if (playerBoard[PlayerShotRowIdx][PlayerShotColIdx] === 0) {\r\n                playerBoard[PlayerShotRowIdx][PlayerShotColIdx] = 'o'\r\n                document.getElementById(`${PlayerShotRowIdx},${PlayerShotColIdx}`).classList.add(\"missShot\");\r\n                setTurn(\"YOUR\")\r\n            }\r\n            else if (playerBoard[PlayerShotRowIdx][PlayerShotColIdx] === 1 || 2 || 3 || 4 || 5) {\r\n                countPlayerLeftShips(playerBoard[PlayerShotRowIdx][PlayerShotColIdx])\r\n                playerBoard[PlayerShotRowIdx][PlayerShotColIdx] = 'x'\r\n                document.getElementById(`${PlayerShotRowIdx},${PlayerShotColIdx}`).classList.add(\"shipShotColor\");\r\n                setTurn(\"YOUR\")\r\n            }\r\n        }\r\n    };\r\n\r\n    //Count PLayer ships left after each shot\r\n    let countPlayerLeftShips = (PlayerShipNum) => {\r\n        let ShotIdx = PlayerShipNum - 1\r\n        PlayerShipsLeft[ShotIdx]--\r\n\r\n        if (PlayerShipsLeft[ShotIdx] === 0) {\r\n            console.log(\"ShipSunk\", PlayerShipNum)\r\n            playerShips--\r\n            setPlayerInfo(`${playerShips} TO SINK`)\r\n        }\r\n        if (PlayerShipsLeft.reduce(checkWinner) === 0) {\r\n            console.log(\"PC WON\")\r\n            setPlayerInfo(`${playerShips} LEFT TO SINK, PC HAS DEFEATED YOU!!`)\r\n            setDisabled(true)\r\n        }\r\n    }\r\n    //Count PC ships left after each shot\r\n    let countPcLeftShips = (PcShipNum, e) => {\r\n        let ShotIdx = PcShipNum - 1\r\n        PcShipsLeft[ShotIdx]--\r\n\r\n        if (PcShipsLeft[ShotIdx] === 0) {\r\n            pcShips--\r\n            setPcInfo(`${pcShips} TO SINK`)\r\n        }\r\n\r\n        if (PcShipsLeft.reduce(checkWinner) === 0) {\r\n            setPcInfo(`${pcShips} LEFT TO SINK, YOU WON!!`)\r\n            setDisabled(true)//blocks all features at gameover\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <h2>BATTLESHIP</h2>\r\n            <h3>Drag your ships to the Player's board and press START!</h3>\r\n            <div className=\"all-boards\">\r\n                <div>\r\n                    <p>PLAYER BOARD</p>\r\n                    <div className=\"grid\"\r\n                        onDrop={(e) => drop(e)}\r\n                        touchend={(e) => drop(e)}\r\n                        onDragOver={(e) => dragOver(e)}\r\n                        touchmove={(e) => dragOver(e)}\r\n                    >\r\n                        {playerBoard.map((BOARD_ROWS, colIndex) => (\r\n                            <div key={colIndex} >\r\n                                {\r\n                                    BOARD_ROWS.map((BOARD_COLS, rowIndex) => (\r\n                                        <div key={rowIndex} className=\"square\" id={[rowIndex, colIndex]}\r\n                                        ></div>\r\n                                    ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <h4 className=\"info\">{playerInfo}</h4>\r\n                </div>\r\n                <h4>{turn} TURN</h4>\r\n                <div>\r\n                    <p>PC BOARD</p>\r\n                    <div className=\"grid\">\r\n                        {PcBoard.map((BOARD_ROWS, colIndex) => (\r\n                            <div key={colIndex} >\r\n                                {\r\n                                    BOARD_ROWS.map((BOARD_COLS, rowIndex) => (\r\n                                        <div key={rowIndex} disabled={disabled} className=\"square\" id={pcId++}\r\n                                            onClick={e => recieveShootPc(rowIndex, colIndex, e)}></div>\r\n                                    ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <h4 className=\"info\">{pcInfo}</h4>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn\" onClick={startGameBtn}>START</button>\r\n            <button className=\"btn\" onClick={refresh}>RESTART</button>\r\n            <ShipsDragNDrop shipList={shipList} />\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GamePage;","import './App.css';\nimport React from 'react';\nimport WelcomePage from './pages/WelcomePage';\nimport GamePage from './pages/GamePage';\nimport { useState } from 'react';\n\n\nfunction App() {\n\n  //PAGE STATES//\n  const [appState, setAppstate] = useState('welcome')\n\n  //SHIP LIST\n  const [shipList, setShipList] = useState([\n    { name: \"cruiser-container\", length: \"1\", id: \"cruiser-container\" },\n    { name: \"destroyer-container\", length: \"2\", id: \"destroyer-container\" },\n    { name: \"submarine-container\", length: \"3\", id: \"submarine-container\" },\n    { name: \"battleship-container\", length: \"4\", id: \"battleship-container\" },\n    { name: \"carrier-container\", length: \"5\", id: \"carrier-container\" }\n  ])\n\n  const startPlaying = () => {\n    setAppstate('play');\n  }\n\n  return (\n    <div className=\"App\">\n      {appState === 'play' ? <GamePage shipList={shipList} setShipList={setShipList} /> : <WelcomePage startPlaying={startPlaying} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}